/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// document.addEventListener(\"DOMContentLoaded\", () => { });\nwindow.addEventListener(\"load\", function (event) {\n    var width = 500;\n    var height = 450;\n    var body = document.querySelector('body');\n    // sample gradient - DEBUG ONLY\n    // let mainDiv:HTMLElement = document.createElement('div');\n    // mainDiv.style.width = `${width}px`;\n    // mainDiv.style.height = `${height}px`; \n    // mainDiv.style.background = \"#0ff\";\n    // mainDiv.style.marginBottom = \"20px\"; \n    // mainDiv.style.cssFloat = \"left\"\n    // mainDiv.style.background = \"transparent\"\n    // mainDiv.style.background = `linear-gradient(180deg, #fff, #FF1122, #000, #FF9955, #fff)`\n    // body.appendChild(mainDiv);\n    var wrapper = document.createElement('div');\n    wrapper.style.width = width + \"px\";\n    wrapper.style.height = height + \"px\";\n    wrapper.style.position = \"relative\";\n    wrapper.style.cssFloat = \"left\";\n    wrapper.classList.add('game-wrapper');\n    body.appendChild(wrapper);\n    var _colors = [\n        { color: 0xF38630, percentage: 0 },\n        { color: 0xFA6900, percentage: 0.3 },\n        { color: 0xE0E4CC, percentage: 0.5 },\n        { color: 0xA7DBD8, percentage: 0.7 },\n        { color: 0x69D2E7, percentage: 1 },\n    ];\n    var level_1 = new Level({\n        elem: wrapper,\n        rows: 5,\n        cols: 5,\n        gradient: {\n            type: GradientType.LINEAR,\n            colors: _colors,\n            angleDeg: 180\n        },\n        blocked: [0, 2, 3, 5, 6, 8, 22, 24],\n        onFinishedLevel: function () { }\n    });\n    // GRID on canvas - DEBUG ONLY \n    // let canvas = document.createElement('canvas');\n    // canvas.style.width = `${width}px`;\n    // canvas.style.height = `${height}px`;\n    // canvas.style.position = \"absolute\";\n    // canvas.style.top = \"0px\";\n    // canvas.style.left = \"0px\";\n    // canvas.style.zIndex = \"100\";\n    // canvas.width = width;\n    // canvas.height = height;\n    // wrapper.appendChild(canvas);\n    // let context = canvas.getContext('2d');\n    // let childHeight = height / (_colors.length - 1);\n    // context.fillStyle = \"rgba(100, 100, 255, 1)\";\n    // for(let i = 0; i < _colors.length; i++){\n    //     context.fillRect(0, (childHeight * i) - 1, width, 2);\n    // }\n});\nvar GradientType;\n(function (GradientType) {\n    GradientType[GradientType[\"LINEAR\"] = 1] = \"LINEAR\";\n    GradientType[GradientType[\"QUAD\"] = 2] = \"QUAD\";\n})(GradientType || (GradientType = {}));\nvar Level = /** @class */ (function () {\n    function Level(initOptions) {\n        var _this = this;\n        this.parentElement = null;\n        this.childrens = [];\n        this.secoundBeforeStart = 6;\n        // wyzerowac kontener z poprzednich danych\n        this.parentElement = initOptions.elem;\n        this.clearParentElement();\n        // odczytac w & h kontenera .elem\n        this.readContainerSize();\n        this.rows = initOptions.rows;\n        this.cols = initOptions.cols;\n        this.gradient = initOptions.gradient;\n        this.createMainChildCanvas();\n        // stworzyc dzieci \n        // nalozyc gradient na dzieci\n        this.createChildrens();\n        // show loading wrapper\n        this.showStartCounter();\n        // when loading time finished - shuffle and add events\n        setTimeout(function () {\n            // zablokowac dzieci ktore sa w .blocked\n            _this.blockedChildrensIndexes = initOptions.blocked;\n            _this.blockChildrens();\n            _this.shuffleChildrens();\n            // podpiac eventy do dziecki \n            // plus nasluchiwac na event zakoczenia levela\n            _this.attachEvents();\n        }, (this.secoundBeforeStart * 1000));\n    }\n    Level.prototype.showStartCounter = function () {\n        var timeFinish = new Date(new Date().getTime() + this.secoundBeforeStart * 1000);\n        var counter = document.createElement('div');\n        counter.style.position = \"absolute\";\n        counter.style.width = \"250px\";\n        counter.style.height = \"250px\";\n        counter.style.top = \"50%\";\n        counter.style.left = \"50%\";\n        counter.style.transform = \"translate(-50%, -50%)\";\n        counter.style.display = \"block\";\n        counter.style.zIndex = \"10\";\n        counter.style.fontSize = \"80px\";\n        counter.style.color = \"#fff\";\n        counter.style.background = \"rgba(105,210,231,1)\";\n        counter.style.borderRadius = \"50%\";\n        counter.style.textAlign = \"center\";\n        counter.style.lineHeight = \"250px\";\n        var interval = setInterval(function () {\n            var now = new Date();\n            var diff = timeFinish.getTime() - now.getTime();\n            var sec = Math.floor(diff / 1000);\n            if (sec <= 0) {\n                counter.innerHTML = \"\";\n                counter.remove();\n                clearInterval(interval);\n            }\n            else {\n                counter.innerHTML = sec + \"s\";\n            }\n        }, 100);\n        this.parentElement.appendChild(counter);\n    };\n    Level.prototype.shuffleChildrens = function () {\n        var blockedCount = this.blockedChildrensIndexes.length;\n        for (var i = 0, from = void 0; from = this.childrens[i]; i++) {\n            if (!from.isBlocked) {\n                var toIndex = null;\n                var to = null;\n                while (true) {\n                    toIndex = Math.floor(Math.random() * (this.childrens.length - blockedCount));\n                    to = this.childrens[toIndex];\n                    if (to.isBlocked === false) {\n                        break;\n                    }\n                }\n                if (toIndex != null && to != null) {\n                    this.replaceChildrenPosition(from, to);\n                }\n            }\n        }\n    };\n    Level.prototype.levelFinished = function () {\n        console.log('koniec gry');\n        this.detachEvents();\n    };\n    Level.prototype.isLevelFinished = function () {\n        return this.childrens.every(function (e) { return e.startIndex === e.currentIndex; });\n    };\n    Level.prototype.detachEvents = function () {\n        for (var i = 0, child = void 0; child = this.childrens[i]; i++) {\n            var childClone = child.elem.cloneNode(true);\n            child.elem.parentNode.replaceChild(childClone, child.elem);\n            child.elem = childClone;\n        }\n    };\n    Level.prototype.replaceChildrenPosition = function (from, to) {\n        var top = to.elem.style.top;\n        var left = to.elem.style.left;\n        to.elem.style.top = from.elem.style.top;\n        to.elem.style.left = from.elem.style.left;\n        from.elem.style.top = top;\n        from.elem.style.left = left;\n        var index = from.currentIndex;\n        from.currentIndex = to.currentIndex;\n        to.currentIndex = index;\n    };\n    Level.prototype.attachEvents = function () {\n        var _this = this;\n        var isItemClicked = false;\n        var itemClicked = null;\n        var _loop_1 = function (i, child) {\n            var elem = child.elem, isBlocked = child.isBlocked;\n            if (isBlocked) {\n                return \"continue\";\n            }\n            var onClick = function (ev) {\n                if (isItemClicked && itemClicked != null) {\n                    itemClicked.elem.style.transform = \"scale(1.0)\";\n                    itemClicked.elem.style.zIndex = \"1\";\n                    _this.replaceChildrenPosition(itemClicked, child);\n                    itemClicked = null;\n                    isItemClicked = false;\n                    if (_this.isLevelFinished()) {\n                        _this.levelFinished();\n                    }\n                    ;\n                }\n                else {\n                    elem.style.transform = \"scale(1.2)\";\n                    elem.style.zIndex = \"2\";\n                    child.isClicked = true;\n                    isItemClicked = true;\n                    itemClicked = child;\n                }\n            };\n            elem.addEventListener('click', onClick);\n        };\n        for (var i = 0, child = void 0; child = this.childrens[i]; i++) {\n            _loop_1(i, child);\n        }\n    };\n    Level.prototype.blockChildrens = function () {\n        for (var i = 0; i < this.blockedChildrensIndexes.length; i++) {\n            var index = this.blockedChildrensIndexes[i];\n            this.childrens[index].isBlocked = true;\n            this.childrens[index].elem.style.opacity = \"1\";\n            this.childrens[index].elem.style.cursor = \"not-allowed\";\n            var dot = document.createElement('div');\n            dot.innerHTML = \"&bull;\";\n            dot.style.position = \"absolute\";\n            dot.style.top = \"50%\";\n            dot.style.left = \"50%\";\n            dot.style.width = \"auto\";\n            dot.style.height = \"auto\";\n            dot.style.color = \"#000\";\n            dot.style.transform = \"translate(-50%, -50%)\";\n            dot.style.fontSize = \"30px\";\n            dot.style.textAlign = \"center\";\n            dot.style.lineHeight = this.childrens[index].elem.style.height + \"px\";\n            this.childrens[index].elem.appendChild(dot);\n        }\n    };\n    Level.prototype.createMainChildCanvas = function () {\n        var mainChildCanvas = document.createElement('canvas');\n        mainChildCanvas.width = this.parentWidth;\n        mainChildCanvas.height = this.parentHeight;\n        mainChildCanvas.style.opacity = \"0.01\";\n        mainChildCanvas.style.position = \"absolute\";\n        mainChildCanvas.style.top = \"0px\";\n        mainChildCanvas.style.left = \"0px\";\n        mainChildCanvas.style.zIndex = \"0\";\n        var mainChildCanvasCTX = mainChildCanvas.getContext('2d');\n        var pheta = Math.atan2(-mainChildCanvas.height, mainChildCanvas.width);\n        var AB = Math.abs(mainChildCanvas.height * Math.cos(pheta));\n        var xdx = Math.cos(pheta + Math.PI / 2);\n        var xdy = Math.sin(pheta + Math.PI / 2);\n        var x1 = mainChildCanvas.width / 2 - xdx * AB;\n        var y1 = mainChildCanvas.height / 2 - xdy * AB;\n        var x2 = mainChildCanvas.width / 2 + xdx * AB;\n        var y2 = mainChildCanvas.height / 2 + xdy * AB;\n        var hexToRgb = function (hex) {\n            var r = (hex >> 16) & 255;\n            var g = (hex >> 8) & 255;\n            var b = hex & 255;\n            return { r: r, g: g, b: b };\n        };\n        var componentToHex = function (c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n        };\n        var rgbToHex = function (r, g, b) {\n            return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n        };\n        var gradient = mainChildCanvasCTX.createLinearGradient(x1, y1, x2, y2);\n        for (var i = 0, el = void 0; el = this.gradient.colors[i]; i++) {\n            var percentage = 0;\n            if (el.percentage < 0) {\n                percentage = 0;\n            }\n            else if (el.percentage > 1) {\n                percentage = 1;\n            }\n            else {\n                percentage = el.percentage;\n            }\n            var hex = hexToRgb(el.color);\n            var color = \"\" + rgbToHex(hex.r, hex.g, hex.b);\n            gradient.addColorStop(percentage, color);\n        }\n        mainChildCanvasCTX.fillStyle = gradient;\n        mainChildCanvasCTX.fillRect(0, 0, mainChildCanvas.width, mainChildCanvas.height);\n        this.parentElement.appendChild(mainChildCanvas);\n        this.mainChildCanvas = mainChildCanvas;\n    };\n    Level.prototype.createChildrens = function () {\n        var iterateCount = this.rows * this.cols;\n        var childHeight = Math.floor(this.parentHeight / this.rows);\n        var childWidth = Math.floor(this.parentWidth / this.cols);\n        var id = 0;\n        for (var i = 0; i < iterateCount; i++) {\n            var child = document.createElement('div');\n            child.style.background = \"transparent\";\n            child.style.width = childWidth + \"px\";\n            child.style.height = childHeight + \"px\";\n            child.style.position = \"absolute\";\n            child.style.padding = \"0px\";\n            child.style.zIndex = \"1\";\n            child.style.opacity = \"1\";\n            child.style.cursor = \"move\";\n            child.style.border = \"0px solid #eee\";\n            child.style.transform = \"scale(1)\";\n            child.style.animationDuration = \"1s\";\n            child.style.animationTimingFunction = \"ease-in-out\";\n            var currentRow = Math.floor(i / this.cols);\n            var top_1 = childHeight * currentRow;\n            child.style.top = top_1 + \"px\";\n            var curretCol = Math.floor(i % this.cols);\n            var left = childWidth * curretCol;\n            child.style.left = left + \"px\";\n            var childCanvas = document.createElement('canvas');\n            childCanvas.width = childWidth;\n            childCanvas.height = childHeight;\n            var childCTX = childCanvas.getContext('2d');\n            childCTX.drawImage(this.mainChildCanvas, left, top_1, childWidth, childHeight, 0, 0, childWidth, childHeight);\n            child.appendChild(childCanvas);\n            this.parentElement.appendChild(child);\n            id++;\n            this.childrens.push({\n                elem: child,\n                isBlocked: false,\n                startLeft: left,\n                startTop: top_1,\n                id: id.toString(),\n                startIndex: i,\n                currentIndex: i\n            });\n        }\n    };\n    // attachMoveEvents(){\n    // let shiftTop = 0;\n    // let shiftLeft = 0;\n    // const onMouseMove = (ev: MouseEvent) => {\n    //     if(child.isMouseDownPressed){        \n    //         let newLeft = ev.clientX - this.parentElement.offsetLeft + shiftLeft;\n    //         let newTop = ev.clientY - this.parentElement.offsetTop + shiftTop;\n    //         console.log('?', \n    //             this.parentElement.offsetLeft, this.parentElement.offsetTop,\n    //             ev.clientX, ev.clientY, \n    //             ev.clientX - this.parentElement.offsetLeft, ev.clientY - this.parentElement.offsetTop,\n    //             elem.style.top, elem.style.left)\n    //         elem.style.top = `${newTop}px`;\n    //         elem.style.left = `${newLeft}px`;\n    //     }\n    // }\n    // const onMouseUp = (ev: MouseEvent) => {\n    //     elem.style.transform = \"scale(1)\";\n    //     elem.style.zIndex = \"1\";\n    //     elem.style.top = `${startTop}px`;\n    //     elem.style.left = `${startLeft}px`;\n    //     child.isMouseDownPressed = false;\n    //     elem.removeEventListener('mouseup', onMouseUp);\n    //     // elem.removeEventListener('mousemove', onMouseMove);\n    // }\n    // const onMouseDown = (ev: MouseEvent) => {\n    //     elem.style.transform = \"scale(1.2)\";\n    //     elem.style.zIndex = \"2\";\n    //     child.isMouseDownPressed = true;\n    //     shiftTop    = (ev.clientY - this.parentElement.offsetTop - elem.offsetTop)  * 1.2;\n    //     shiftLeft   = (ev.clientX - this.parentElement.offsetLeft - elem.offsetLeft) * 1.2;\n    //     window.addEventListener('mouseup', onMouseUp);\n    //     window.addEventListener('mousemove', onMouseMove);\n    // }\n    // elem.addEventListener('mousedown', onMouseDown);\n    // }\n    // fillChildrendWithGradient(){\n    //     // interface IGradient {\n    //     //     type: GradientType,\n    //     //     colors: Array<number>,\n    //     //     angleDeg: number \n    //     // }\n    //     const hexToRgb = (hex:number) => {\n    //         var r = (hex >> 16) & 255;\n    //         var g = (hex >> 8) & 255;\n    //         var b = hex & 255;\n    //         return r + \",\" + g + \",\" + b;\n    //     }\n    //     const calculateRgbByPercentage = (colorStart:number, colorEnd:number, percentage:number) =>{\n    //         let r_start = (colorStart >> 16) & 255;\n    //         let g_start = (colorStart >> 8) & 255;\n    //         let b_start = colorStart & 255;\n    //         let r_end = (colorEnd >> 16) & 255;\n    //         let g_end = (colorEnd >> 8) & 255;\n    //         let b_end = colorEnd & 255;\n    //         let r_finish = r_start + ((r_end - r_start) * percentage);\n    //         let g_finish = g_start + ((g_end - g_start) * percentage);\n    //         let b_finish = b_start + ((b_end - b_start) * percentage);\n    //         console.log('COLOR R', r_start, r_end, r_finish) \n    //         console.log('COLOR G', g_start, g_end, g_finish) \n    //         console.log('COLOR B', b_start, b_end, b_finish)\n    //         console.log('COLOR %', percentage)\n    //         return `rgb(${r_finish},${g_finish},${b_finish})`;\n    //     }\n    //     const calculateCssColor = (y:number) => {\n    //         let containerHeight:number = this.parentHeight\n    //         let colorHeight:number = containerHeight / (this.gradient.colors.length - 1);\n    //         let gradientColorIndexStart:number = Math.floor(y / colorHeight); \n    //         let gradientColorIndexEnd:number = gradientColorIndexStart + 1;\n    //         if(gradientColorIndexEnd >= this.gradient.colors.length){\n    //             gradientColorIndexEnd = gradientColorIndexStart; \n    //             gradientColorIndexStart = gradientColorIndexStart - 1; \n    //         }\n    //         let gradientColorStart = this.gradient.colors[gradientColorIndexStart];\n    //         let gradientColorEnd = this.gradient.colors[gradientColorIndexEnd];\n    //         let colorStartHeight = gradientColorIndexStart * colorHeight;\n    //         let percentageColorStart = (y - colorStartHeight) / colorHeight;\n    //         let diffHeightInPx =  colorHeight - (y - colorStartHeight);  \n    //         console.log('KOLORY', hexToRgb(gradientColorStart), hexToRgb(gradientColorEnd))\n    //         console.log(\"%%\", percentageColorStart, y, colorStartHeight, colorHeight, gradientColorIndexStart);\n    //         let cssColorFinish = calculateRgbByPercentage(gradientColorStart, gradientColorEnd, percentageColorStart);\n    //         return {\n    //             css: cssColorFinish,\n    //             gradientColorIndexStart: gradientColorIndexStart,\n    //             gradientColorIndexEnd: gradientColorIndexEnd,\n    //             diffHeightInPx: diffHeightInPx,\n    //         }\n    //     }\n    //     if(this.gradient.type == GradientType.LINEAR){\n    //         let cssGradientType = \"linear-gradient\";\n    //         let cssAngleDeg = `${this.gradient.angleDeg}deg`;\n    //         for(let i:number = 0, child; child = this.childrens[i]; i++){\n    //             let { top, left, width, height } = child.style;\n    //             let x1:number = parseInt(left, 10);\n    //             let y1:number = parseInt(top, 10);\n    //             let x2:number = parseInt(left, 10) + parseInt(width, 10);\n    //             let y2:number = parseInt(top, 10) + parseInt(height, 10);\n    //             console.log('---WIERSZ', i)\n    //             let colStart = calculateCssColor(y1);\n    //             let colEnd = calculateCssColor(y2);\n    //             console.log('-- ',i,  colStart, colEnd);\n    //             // let indexAmount = colEnd.gradientColorIndexEnd - colStart.gradientColorIndexStart;\n    //             // let containerHeight:number = this.parentHeight\n    //             // let colorHeight:number = containerHeight / (this.gradient.colors.length - 1);\n    //             // let aa = colorHeight / containerHeight;\n    //             let percentageStart = 0;\n    //             if(i == 0){\n    //                 // percentageStart = colStart.diffHeightInPx / parseInt(height, 10) - 100;  \n    //             }else{\n    //                 // percentageStart = colStart.diffHeightInPx / parseInt(height, 10) - 100;  \n    //             }\n    //             percentageStart = colStart.diffHeightInPx / parseInt(height, 10);  \n    //             let percentageCss = (percentageStart) ? percentageStart + \"%\": \"\"\n    //             let cssColors = `${colStart.css} ${percentageCss}, `;\n    //             for(let j = colStart.gradientColorIndexEnd; j < colEnd.gradientColorIndexEnd; j++){\n    //                 // let percentageCurrent:number = colStart.diffHeightInPx / parseInt(height, 10) - 100;  \n    //                 // console.log('------------- co mamy w przesunieciu?', percentageCurrent, colStart.diffHeightInPx, parseInt(height, 10));\n    //                 // Wys = wysokosc przesuniecia wzgledem poczatku kolor w px\n    //                 // ProcentPrzesuniecia = cala wysokosc bloku pojedycznego / Wys\n    //                 let currentColor = this.gradient.colors[j];\n    //                 cssColors += `rgb(${hexToRgb(currentColor)}), `\n    //             }\n    //             cssColors += `${colEnd.css}`;\n    //             console.log(' ?? ', i, cssColors);\n    //             let cssBackground = `${cssGradientType}(${cssAngleDeg}, ${cssColors})`\n    //             console.log('co wyszlo?', cssBackground, cssAngleDeg)                \n    //             child.style.background = cssBackground;   \n    //             child.style.border = \"1px solid #0FF\"; \n    //             child.style.boxSizing = \"border-box\";\n    //         }\n    //     }\n    // }\n    // createChildrens(){\n    //     let iterateCount = this.rows * this.cols;\n    //     let childHeight = this.parentHeight / this.rows;\n    //     let childWidth = this.parentWidth / this.cols;\n    //     for(let i:number = 0; i < iterateCount; i++){\n    //         let child = document.createElement('div');\n    //         child.style.background = \"#0ff\";\n    //         child.style.width = `${childWidth}px`;\n    //         child.style.height = `${childHeight}px`;\n    //         child.style.position = \"absolute\";\n    //         let currentRow = Math.floor(i / this.cols);\n    //         let top = childHeight * currentRow;\n    //         child.style.top = `${top}px`;\n    //         let curretCol = Math.floor(i % this.cols);\n    //         let left = childWidth * curretCol;\n    //         child.style.left = `${left}px`;\n    //         this.parentElement.appendChild(child);\n    //         this.childrens.push(child);\n    //     }\n    // }\n    Level.prototype.readContainerSize = function () {\n        this.parentHeight = this.parentElement.clientHeight;\n        this.parentWidth = this.parentElement.clientWidth;\n    };\n    Level.prototype.clearParentElement = function () {\n        this.parentElement.innerHTML = \"\";\n    };\n    return Level;\n}());\nvar LevelManager = /** @class */ (function () {\n    function LevelManager() {\n    }\n    return LevelManager;\n}());\nvar App = /** @class */ (function () {\n    function App() {\n    }\n    return App;\n}());\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });